<?php
/**
 * GraphQLTest
 * PHP version 7.3
 *
 * @category Class
 * @package  GraphQL\Client
 * @author   GraphQL Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DynamicData REST API
 *
 * This provides a REST API endpoint as proof of concept to access Dynamic Data Objects stored in dynamic_data. Access to all objects is limited to read-only mode by default. The Sample object requires cookie authentication (after login on this site) or token authentication to create/update/delete items. Some internal DD objects are also available in read-only mode for use in Javascript on the site.
 *
 * The version of the GraphQL document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * GraphQL Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by GraphQL Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace GraphQL\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use PHPUnit\Framework\TestCase;

/**
 * GraphQLTest Class Doc Comment
 *
 * @category Class
 * @package  GraphQL\Client
 * @author   GraphQL Generator team
 * @link     https://openapi-generator.tech
 */
class GraphQLTest extends TestCase
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var string
     */
    protected static $endpoint;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $schemaFile = '../../../html/var/cache/api/schema.graphql';
        if (file_exists($schemaFile)) {
            $contents = file_get_contents($schemaFile);
            $pattern = '/"""GraphQL Endpoint: ([^"]+)"""/';
            preg_match($pattern, $contents, $matches);
            if (!empty($matches) && !empty($matches[1])) {
                self::$endpoint = $matches[1];
            }
        }
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->client = $this->client ?: new Client();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for samples
     */
    public function testSamplesQuery()
    {
        // TODO: implement
        //$this->markTestIncomplete('Not implemented');
        $query = $this->getSamplesQuery();
        $body = $this->getSamplesBody($query);

        $httpBody = json_encode($body);
        $headers = ['Content-Type' => 'application/json', 'Accept' => 'application/json'];

        $expected = $this->getSamplesResult();
        $result = true;

        try {
            $response = $this->client->request('POST', self::$endpoint, ['headers' => $headers, 'body' => $httpBody]);
            $content = (string) $response->getBody();
            $result = json_decode($content, true);
            print_r($result);
            if (is_array($result) and !empty($result['extensions'])) {
                unset($result['extensions']);
            }
        } catch (\Exception $e) {
            echo 'Exception when calling GraphQLTest->testSamplesQuery: ', $e->getMessage(), PHP_EOL;
        }
        $this->assertEquals($expected, $result);
    }

    public function getSamplesQuery()
    {
        $queryFile = 'samples.query.graphql';
        if (file_exists($queryFile)) {
            $query = file_get_contents($queryFile);
            return $query;
        }
        $query = 'query listSamples {
  samples {
    id
    name
    age
  }
}
query filterSamples($filter: [String]) {
  samples(filter: $filter) {
    id
    name
    age
  }
}';
        file_put_contents($queryFile, $query);
        return $query;
    }

    public function getSamplesBody($query, $variables = null, $operation = null)
    {
        $bodyFile = 'samples.query.json';
        if (file_exists($bodyFile)) {
            $contents = file_get_contents($bodyFile);
            $body = json_decode($contents, true);
            if ($body['query'] !== $query) {
                $body['query'] = $query;
                file_put_contents($bodyFile, json_encode($body, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            }
            return $body;
        }
        $variables = $variables ?? ['filter' => ['age,gt,1']];
        $operation = $operation ?? 'filterSamples';

        $body = [
            'query' => $query,
            'variables' => $variables,
            'operationName' => $operation,
        ];
        file_put_contents($bodyFile, json_encode($body, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        return $body;
    }

    public function getSamplesResult()
    {
        $resultFile = 'samples.result.json';
        if (file_exists($resultFile)) {
            $contents = file_get_contents($resultFile);
            $result = json_decode($contents, true);
            return $result;
        }
        $samples = [];
        $samples[] = ['id' => '1', 'name' => 'Johnny', 'age' => 32];
        $samples[] = ['id' => '2', 'name' => 'Nancy', 'age' => 29];
        //$samples[] = ['id' => 3, 'name' => 'Baby', 'age' => 1];
        $result = [
            'data' => ['samples' => $samples],
        ];
        file_put_contents($resultFile, json_encode($result, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK));
        return $result;
    }
}
