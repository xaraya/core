<?php
/**
 * GraphQLTest
 * PHP version 7.3
 *
 * @category Class
 * @package  GraphQL\Client
 * @author   GraphQL Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DynamicData REST API
 *
 * This provides a REST API endpoint as proof of concept to access Dynamic Data Objects stored in dynamic_data. Access to all objects is limited to read-only mode by default. The Sample object requires cookie authentication (after login on this site) or token authentication to create/update/delete items. Some internal DD objects are also available in read-only mode for use in Javascript on the site.
 *
 * The version of the GraphQL document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * GraphQL Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by GraphQL Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace GraphQL\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use PHPUnit\Framework\TestCase;

/**
 * GraphQLTest Class Doc Comment
 *
 * @category Class
 * @package  GraphQL\Client
 * @author   GraphQL Generator team
 * @link     https://openapi-generator.tech
 */
class GraphQLTest extends TestCase
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var string
     */
    protected static $endpoint;

    /**
     * @var string
     */
    protected static $token;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $schemaFile = '../../../html/var/cache/api/schema.graphql';
        if (file_exists($schemaFile)) {
            $contents = file_get_contents($schemaFile);
            $pattern = '/"""GraphQL Endpoint: ([^"]+)"""/';
            preg_match($pattern, $contents, $matches);
            if (!empty($matches) && !empty($matches[1])) {
                self::$endpoint = $matches[1];
            }
        }
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->client = $this->client ?: new Client();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Get API auth token
     */
    public function getAuthToken()
    {
        if (!empty(self::$token)) {
            return self::$token;
        }
        $tokenFile = 'login.result.json';
        if (!file_exists($tokenFile)) {
            $this->testQueryFiles("login.graphql", "login.query.json", "login.result.json");
        }
        $contents = file_get_contents($tokenFile);
        $result = json_decode($contents, true);
        if (empty($result) || empty($result['data']) || empty($result['data']['getToken']) || $result['data']['getToken']['expiration'] < date('c')) {
            unlink($tokenFile);
            $this->testQueryFiles("login.graphql", "login.query.json", "login.result.json");
            $contents = file_get_contents($tokenFile);
            $result = json_decode($contents, true);
        }
        self::$token = $result['data']['getToken']['access_token'];
        return self::$token;
    }

    /**
     * Data provider for testQueryFiles
     */
    public function provideQueryFiles()
    {
        return [
            "Get schema" => [],
            // "Check login" => ["login.graphql", "login.query.json", "login.result.json"],
            "Test whoami" => ["whoami.graphql", "", "whoami.result.json", true],
            "Test samples with filter" => ["samples.graphql", "samples.query.json", "samples.result.json"],
            "Test objects" => ["objects.graphql", "", "objects.result.json", true],
        ];
    }

    /**
     * Test case for query files
     * @dataProvider provideQueryFiles
     */
    public function testQueryFiles($queryFile = "", $bodyFile = "", $resultFile = "", $authToken = false)
    {
        // TODO: implement
        //$this->markTestIncomplete('Not implemented');
        if (!empty($queryFile) && file_exists($queryFile)) {
            $query = file_get_contents($queryFile);
        } else {
            $query = "{schema}";
        }

        if (!empty($bodyFile) && file_exists($bodyFile)) {
            $contents = file_get_contents($bodyFile);
            $body = json_decode($contents, true);
            if ($body['query'] !== $query) {
                $body['query'] = $query;
                file_put_contents($bodyFile, json_encode($body, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            }
        } else {
            $variables = $variables ?? null;
            $operation = $operation ?? null;
            $body = [
                'query' => $query,
                'variables' => $variables,
                'operationName' => $operation,
            ];
        }

        $httpBody = json_encode($body);
        $headers = ['Content-Type' => 'application/json', 'Accept' => 'application/json'];
        if (!empty($authToken)) {
            $headers['X-Auth-Token'] = $this->getAuthToken();
        }

        if (!empty($resultFile) && file_exists($resultFile)) {
            $contents = file_get_contents($resultFile);
            $expected = json_decode($contents, true);
        } elseif ($query === "{schema}") {
            $schemaFile = '../../../html/var/cache/api/schema.graphql';
            $contents = file_get_contents($schemaFile);
            $expected = implode("\n", array_slice(explode("\n", $contents), 1, -1));
        } else {
            $expected = [
                'data' => [],
            ];
        }

        $result = true;

        try {
            $response = $this->client->request('POST', self::$endpoint, ['headers' => $headers, 'body' => $httpBody]);
            $content = (string) $response->getBody();
            if ($query !== "{schema}") {
                $result = json_decode($content, true);
                // print_r($result);
                if (is_array($result) and !empty($result['extensions'])) {
                    unset($result['extensions']);
                }
                if (empty($resultFile) && !empty($queryFile)) {
                    $resultFile = str_replace(".graphql", ".result.json", $queryFile);
                }
                if (!empty($resultFile) && !file_exists($resultFile)) {
                    file_put_contents($resultFile, json_encode($result, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK));
                }
            } else {
                $result = $content;
            }
        } catch (\Exception $e) {
            echo 'Exception when calling GraphQLTest->testQueryFiles: ', $e->getMessage(), PHP_EOL;
        }

        $this->assertEquals($expected, $result);
    }
}
