<?php
/**
 * RestAPITest
 * PHP version 7.3
 *
 * @category Class
 * @package  RestAPI\Client
 * @author   RestAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DynamicData REST API
 *
 * This provides a REST API endpoint as proof of concept to access Dynamic Data Objects stored in dynamic_data. Access to all objects is limited to read-only mode by default. The Sample object requires cookie authentication (after login on this site) or token authentication to create/update/delete items. Some internal DD objects are also available in read-only mode for use in Javascript on the site.
 *
 * The version of the RestAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * RestAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by RestAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace RestAPI\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use PHPUnit\Framework\TestCase;

/**
 * RestAPITest Class Doc Comment
 *
 * @category Class
 * @package  RestAPI\Client
 * @author   RestAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RestAPITest extends TestCase
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var string
     */
    protected static $endpoint;

    /**
     * @var array<mixed>
     */
    protected static $operations;

    /**
     * @var array<mixed>
     */
    protected static $components;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $openapiFile = '../../../html/var/cache/api/openapi.json';
        if (file_exists($openapiFile)) {
            $contents = file_get_contents($openapiFile);
            $openapi = json_decode($contents, true);
            if (!empty($openapi['servers']) && !empty($openapi['servers'][0]['url'])) {
                self::$endpoint = $openapi['servers'][0]['url'];
            }
            self::$operations = [];
            foreach ($openapi['paths'] as $path => $operations) {
                foreach ($operations as $method => $operation) {
                    $operation['path'] = $path;
                    $operation['method'] = $method;
                    self::$operations[$operation['operationId']] = $operation;
                    //echo $operation['operationId'], ' ', $path, ' ', $method, PHP_EOL;
                }
            }
            self::$components = $openapi['components'];
        }
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->client = $this->client ?: new Client();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void {}

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void {}

    /**
     * Data provider for testRequestFiles
     */
    public function provideRequestFiles()
    {
        return [
            // "Get schema" => [],
            // "Check login" => ["access_token", "login.request.json", "login.result.json"],
            // "Test whoami" => ["show_whoami"],
            "Test samples with filter" => ["view_sample"],
            "Test display sample" => ["display_sample"],
        ];
    }

    /**
     * Test case for request files
     * @dataProvider provideRequestFiles
     */
    public function testRequestFiles($operationId = "", $requestFile = "", $resultFile = "", $authToken = false)
    {
        $operation = self::$operations[$operationId];
        $request = $this->getOperationRequest($operation, $requestFile);
        $expected = $this->getOperationResult($operation, $resultFile);
        $result = true;

        // @todo evaluate openapi.json for parameters, body and security
        if (empty($request['options'])) {
            //$request['options'] = ['headers' => $headers, 'query' => $params, 'body' => $httpBody];
            $request['options'] = [];
        }
        if (empty($request['options']['headers'])) {
            $headers = ['Content-Type' => 'application/json', 'Accept' => 'application/json'];
            $request['options']['headers'] = $headers;
        }
        if (empty($request['options']['query'])) {
            //$params = ['limit' => 100, 'offset' => 0, 'order' => 'age', 'filter' => ['age,gt,1']];
            $params = null;
            $request['options']['query'] = $params;
        }
        if (empty($request['options']['body'])) {
            //$httpBody = json_encode($body);
            $httpBody = null;
            $request['options']['body'] = $httpBody;
        }

        try {
            $response = $this->client->request($request['method'], self::$endpoint . $request['uri'], $request['options']);
            $content = (string) $response->getBody();
            $result = json_decode($content, true);
            //print_r($result);
            if (!empty($operationId) && empty($resultFile)) {
                $resultFile = $operation['operationId'] . '.result.json';
            }
            if (!empty($resultFile) && !file_exists($resultFile)) {
                file_put_contents($resultFile, json_encode($result, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK));
            }
        } catch (\Exception $e) {
            echo 'Exception when calling RestAPITest->testRequestFiles: ', $e->getMessage(), PHP_EOL;
        }
        $this->assertEquals($expected, $result);
    }

    public function getOperationRequest($operation, $requestFile = "")
    {
        if (empty($requestFile)) {
            $requestFile = $operation['operationId'] . '.request.json';
        }
        if (file_exists($requestFile)) {
            $contents = file_get_contents($requestFile);
            $request = json_decode($contents, true);
            return $request;
        }

        // @todo evaluate openapi.json for parameters, body and security
        //$params = ['limit' => 100, 'offset' => 0, 'order' => 'age', 'filter' => ['age,gt,1']];
        $params = null;
        //$httpBody = json_encode($body);
        $httpBody = null;
        $headers = ['Content-Type' => 'application/json', 'Accept' => 'application/json'];

        $request = [
            'method' => strtoupper($operation['method']),
            'uri' => $operation['path'],
            'options' => ['headers' => $headers, 'query' => $params, 'body' => $httpBody],
        ];
        file_put_contents($requestFile, json_encode($request, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK));
        return $request;
    }

    public function getOperationResult($operation, $resultFile = "")
    {
        if (empty($resultFile)) {
            $resultFile = $operation['operationId'] . '.result.json';
        }
        if (file_exists($resultFile)) {
            $contents = file_get_contents($resultFile);
            $result = json_decode($contents, true);
            return $result;
        }
        // @todo evaluate openapi.json for response
        $result = [];
        return $result;
    }
}
