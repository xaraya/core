<?php
/**
 * RestAPITest
 * PHP version 7.3
 *
 * @category Class
 * @package  RestAPI\Client
 * @author   RestAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DynamicData REST API
 *
 * This provides a REST API endpoint as proof of concept to access Dynamic Data Objects stored in dynamic_data. Access to all objects is limited to read-only mode by default. The Sample object requires cookie authentication (after login on this site) or token authentication to create/update/delete items. Some internal DD objects are also available in read-only mode for use in Javascript on the site.
 *
 * The version of the RestAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * RestAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by RestAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace RestAPI\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use PHPUnit\Framework\TestCase;

/**
 * RestAPITest Class Doc Comment
 *
 * @category Class
 * @package  RestAPI\Client
 * @author   RestAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RestAPITest extends TestCase
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var string
     */
    protected static $endpoint;

    /**
     * @var array
     */
    protected static $operations;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $openapiFile = '../../../html/var/cache/api/openapi.json';
        if (file_exists($openapiFile)) {
            $contents = file_get_contents($openapiFile);
            $openapi = json_decode($contents, true);
            if (!empty($openapi['servers']) && !empty($openapi['servers'][0]['url'])) {
                self::$endpoint = $openapi['servers'][0]['url'];
            }
            self::$operations = [];
            foreach ($openapi['paths'] as $path => $operations) {
                foreach ($operations as $method => $operation) {
                    $operation['path'] = $path;
                    $operation['method'] = $method;
                    self::$operations[$operation['operationId']] = $operation;
                    //echo $operation['operationId'], ' ', $path, ' ', $method, PHP_EOL;
                }
            }
        }
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->client = $this->client ?: new Client();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for viewSample
     */
    public function testViewSample()
    {
        // TODO: implement
        //$this->markTestIncomplete('Not implemented');
        $operation = $this->viewSampleOperation();

        //$httpBody = json_encode($body);
        $httpBody = null;
        $headers = ['application/json'];

        $expected = $this->viewSampleResult($operation);
        $result = true;

        try {
            $response = $this->client->request(strtoupper($operation['method']), self::$endpoint . $operation['path'], ['headers' => $headers, 'body' => $httpBody]);
            $content = (string) $response->getBody();
            $result = json_decode($content, true);
            print_r($result);
        } catch (\Exception $e) {
            echo 'Exception when calling RestAPITest->testViewSample: ', $e->getMessage(), PHP_EOL;
        }
        $this->assertEquals($expected, $result);
    }

    public function viewSampleOperation()
    {
        $operationId = 'view_sample';
        return self::$operations[$operationId];
    }

    public function viewSampleResult($operation)
    {
        $samples = [];
        $samples[] = ['id' => 1, 'name' => 'Johnny', 'age' => 32];
        $samples[] = ['id' => 2, 'name' => 'Nancy', 'age' => 29];
        $samples[] = ['id' => 3, 'name' => 'Baby', 'age' => 1];
        $items = [];
        foreach ($samples as $sample) {
            $sample['_links'] = ['self' => ['href' => self::$endpoint . $operation['path'] . '/' . $sample['id']]];
            $sample['age'] = strval($sample['age']);
            unset($sample['id']);
            $items[] = $sample;
        }
        $result = [
            'items' => $items,
            'count' => count($items),
            'limit' => 100,
            'offset' => 0,
            'order' => '',
            'filter' => [],
        ];
        return $result;
    }
}
