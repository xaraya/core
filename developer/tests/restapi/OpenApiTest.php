<?php
/**
 * OpenApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DynamicData REST API
 *
 * This provides a REST API endpoint as proof of concept to access Dynamic Data Objects stored in dynamic_data. Access to all objects is limited to read-only mode by default. The Sample object requires cookie authentication (after login on this site) or token authentication to create/update/delete items. Some internal DD objects are also available in read-only mode for use in Javascript on the site.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OpenApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OpenApiTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void {}

    /**
     * Setup before running each test case
     */
    public function setUp(): void {}

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void {}

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void {}

    /**
     * Test case for createSample
     *
     * .
     *
     */
    public function testCreateSample()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSample
     *
     * .
     *
     */
    public function testDeleteSample()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for displaySample
     *
     * .
     *
     */
    public function testDisplaySample()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateSample
     *
     * .
     *
     */
    public function testUpdateSample()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for viewSample
     *
     * .
     *
     */
    public function testViewSample()
    {
        // TODO: implement
        //$this->markTestIncomplete('Not implemented');
        $items = [];
        $items[] = new \OpenAPI\Client\Model\ViewSampleItems(['name' => 'Johnny', 'age' => 32]);
        $items[] = new \OpenAPI\Client\Model\ViewSampleItems(['name' => 'Nancy', 'age' => 29]);
        $items[] = new \OpenAPI\Client\Model\ViewSampleItems(['name' => 'Baby', 'age' => 1]);
        $data = [
             'limit' => 100,
             'offset' => 0,
             'order' => '',
             'filter' => [],
             'count' => count($items),
             'items' => $items,
    ];
        $expected = new \OpenAPI\Client\Model\ViewSample($data);
        $result = true;
        $apiInstance = new \OpenAPI\Client\Api\SampleApi(
            // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
            // This is optional, `GuzzleHttp\Client` will be used as default.
            //new GuzzleHttp\Client()
        );
        $limit = 100; // int | Number of items to return
        $offset = 0; // int | Offset to start items from
        $order = ['order_example']; // string[] | Property to sort on and optional -direction (comma separated)
        $filter = ['filter_example']; // string[] | Filters to be applied. Each filter consists of a property, an operator and a value (comma separated)

        try {
            //$result = $apiInstance->viewSample($limit, $offset, $order, $filter);
            $result = $apiInstance->viewSample();
            print_r($result);
        } catch (\Exception $e) {
            echo 'Exception when calling SampleApi->viewSample: ', $e->getMessage(), PHP_EOL;
        }
        $this->assertEquals($expected, $result);
    }
}
